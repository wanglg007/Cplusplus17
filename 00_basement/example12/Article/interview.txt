(1)运行如下的C++代码，输出是什么？
    class A
    {
    public:
        virtual void Fun(int number = 10)
        {
            std::cout << "A::Fun with number " << number;
        }
    };
    class B: public A
    {
    public:
        virtual void Fun(int number = 20)
        {
            std::cout << "B::Fun with number " << number;
        }
    };
    int main()
    {
        B b;
        A &a = b;
        a.Fun();
    }
答案：输出B::Fun with number 10。由于a是一个指向B实例的引用，因此在运行的时候会调用B::Fun。但缺省参数是在编译期决定的。在编译的时候，编译器只知道a是一个类型a的引用，
具体指向什么类型在编译期是不能确定的，因此会按照A::Fun的声明把缺省参数number设为10。这一题的关键在于理解确定缺省参数的值是在编译的时候，但确定引用、指针的虚函数调用
哪个类型的函数是在运行的时候。
(2)运行下面的代码，输出是什么？
    class A{};
    class B
    {
    public:
            B() {}
            ~B() {}
    };
    class C
    {
    public:
            C() {}
            virtual ~C() {}
    };
    int _tmain(int argc, _TCHAR* argv[])
    {
            printf("%d, %d, %d\n", sizeof(A), sizeof(B), sizeof(C));
            return 0;
    }
分析：答案是1, 1, 4
备注:class A是一个空类型，它的实例不包含任何信息，但当声明该类型的实例的时候，它必须在内存中占有一定的空间，否则无法使用这些实例。至于占用多少内存由编译器决定。
Visual Studio 2008中每个空类型的实例占用一个byte的空间。class B在class A的基础上添加了构造函数和析构函数。由于构造函数和析构函数的调用与类型的实例无关，在它的实
例中不需要增加任何信息。所以sizeof(B)和sizeof(A)一样，在Visual Studio 2008中都是1。class C在class B的基础上把析构函数标注为虚拟函数。C++的编译器一旦发现一个类型
中有虚拟函数，就会为该类型生成虚函数表，并在该类型的每一个实例中添加一个指向虚函数表的指针。在32位的机器上，一个指针占4个字节的空间，因此sizeof(C)是4。
(2)运行下图中代码，输出的结果是什么？这段代码有什么问题？
   #include <iostream>
   class A
   {
   public:
           A()
           {
                   std::cout << "A is created." << std::endl;
           }

           ~A()
           {
                   std::cout << "A is deleted." << std::endl;
           }
   };
   class B : public A
   {
   public:
           B()
           {
                   std::cout << "B is created." << std::endl;
           }

           ~B()
           {
                   std::cout << "B is deleted." << std::endl;
           }
   };
   int _tmain(int argc, _TCHAR* argv[])
   {
           A* pA = new B();
           delete pA;
           return 0;
   }

答案：输出三行，分别是：A is created. B is created. A is deleted。用new创建B时，回调用B的构造函数。在调用B的构造函数的时候，会先调用A的构造函数。
因此先输出A is created. B is created.接下来运行delete语句时，会调用析构函数。由于pA被声明成类型A的指针，同时基类A的析构函数没有标上virtual，因此只
有A的析构函数被调用到，而不会调用B的析构函数。由于pA实际上是指向一个B的实例的指针，但在析构的时候只调用了基类A的析构函数，却没有调用B的析构函数。
这就是一个问题。如果在类型B中创建了一些资源，比如文件句柄、内存等，在这种情况下都得不到释放，从而导致资源泄漏。